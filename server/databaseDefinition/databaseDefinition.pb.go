// Code generated by protoc-gen-go.
// source: databaseDefinition.proto
// DO NOT EDIT!

/*
Package databaseDefinition is a generated protocol buffer package.

It is generated from these files:
	databaseDefinition.proto

It has these top-level messages:
	Job
	Work
	ClientInfo
	JobWorkIdent
	ID
	JobWork
	Env
*/
package databaseDefinition

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Job struct {
	OwnerID int64 `protobuf:"varint,1,opt,name=OwnerID" json:"OwnerID,omitempty"`
	Id      int64 `protobuf:"varint,2,opt,name=Id" json:"Id,omitempty"`
	// repeated  Work  Parts  =3   ; Parts can get large, so we stram them seperatly
	NumParts     int64  `protobuf:"varint,3,opt,name=NumParts" json:"NumParts,omitempty"`
	NumPartsDone int64  `protobuf:"varint,4,opt,name=NumPartsDone" json:"NumPartsDone,omitempty"`
	JobFolder    string `protobuf:"bytes,5,opt,name=JobFolder" json:"JobFolder,omitempty"`
	Name         string `protobuf:"bytes,6,opt,name=Name" json:"Name,omitempty"`
	Env          string `protobuf:"bytes,7,opt,name=Env" json:"Env,omitempty"`
	ReturnEnv    bool   `protobuf:"varint,8,opt,name=ReturnEnv" json:"ReturnEnv,omitempty"`
	Done         bool   `protobuf:"varint,9,opt,name=Done" json:"Done,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Job) GetOwnerID() int64 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *Job) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Job) GetNumParts() int64 {
	if m != nil {
		return m.NumParts
	}
	return 0
}

func (m *Job) GetNumPartsDone() int64 {
	if m != nil {
		return m.NumPartsDone
	}
	return 0
}

func (m *Job) GetJobFolder() string {
	if m != nil {
		return m.JobFolder
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *Job) GetReturnEnv() bool {
	if m != nil {
		return m.ReturnEnv
	}
	return false
}

func (m *Job) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type Work struct {
	PartID              int64       `protobuf:"varint,1,opt,name=PartID" json:"PartID,omitempty"`
	PartOfID            int64       `protobuf:"varint,2,opt,name=PartOfID" json:"PartOfID,omitempty"`
	DispatchTime        int64       `protobuf:"varint,3,opt,name=DispatchTime" json:"DispatchTime,omitempty"`
	FinishTime          int64       `protobuf:"varint,4,opt,name=FinishTime" json:"FinishTime,omitempty"`
	TotalTimeDispatched int64       `protobuf:"varint,5,opt,name=TotalTimeDispatched" json:"TotalTimeDispatched,omitempty"`
	CompletedBy         *ClientInfo `protobuf:"bytes,6,opt,name=CompletedBy" json:"CompletedBy,omitempty"`
	CurrentClient       *ClientInfo `protobuf:"bytes,7,opt,name=CurrentClient" json:"CurrentClient,omitempty"`
	Done                bool        `protobuf:"varint,8,opt,name=Done" json:"Done,omitempty"`
	Dispatched          bool        `protobuf:"varint,9,opt,name=Dispatched" json:"Dispatched,omitempty"`
	FailCount           int64       `protobuf:"varint,11,opt,name=FailCount" json:"FailCount,omitempty"`
	Error               string      `protobuf:"bytes,12,opt,name=Error" json:"Error,omitempty"`
	Status              string      `protobuf:"bytes,13,opt,name=Status" json:"Status,omitempty"`
	Command             string      `protobuf:"bytes,14,opt,name=Command" json:"Command,omitempty"`
	Parameters          []string    `protobuf:"bytes,15,rep,name=Parameters" json:"Parameters,omitempty"`
}

func (m *Work) Reset()                    { *m = Work{} }
func (m *Work) String() string            { return proto.CompactTextString(m) }
func (*Work) ProtoMessage()               {}
func (*Work) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Work) GetPartID() int64 {
	if m != nil {
		return m.PartID
	}
	return 0
}

func (m *Work) GetPartOfID() int64 {
	if m != nil {
		return m.PartOfID
	}
	return 0
}

func (m *Work) GetDispatchTime() int64 {
	if m != nil {
		return m.DispatchTime
	}
	return 0
}

func (m *Work) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

func (m *Work) GetTotalTimeDispatched() int64 {
	if m != nil {
		return m.TotalTimeDispatched
	}
	return 0
}

func (m *Work) GetCompletedBy() *ClientInfo {
	if m != nil {
		return m.CompletedBy
	}
	return nil
}

func (m *Work) GetCurrentClient() *ClientInfo {
	if m != nil {
		return m.CurrentClient
	}
	return nil
}

func (m *Work) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *Work) GetDispatched() bool {
	if m != nil {
		return m.Dispatched
	}
	return false
}

func (m *Work) GetFailCount() int64 {
	if m != nil {
		return m.FailCount
	}
	return 0
}

func (m *Work) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Work) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Work) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Work) GetParameters() []string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ClientInfo struct {
	OperatingSystem string `protobuf:"bytes,1,opt,name=OperatingSystem" json:"OperatingSystem,omitempty"`
	ComputerName    string `protobuf:"bytes,2,opt,name=ComputerName" json:"ComputerName,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *ClientInfo) GetComputerName() string {
	if m != nil {
		return m.ComputerName
	}
	return ""
}

type JobWorkIdent struct {
	JobID  int64 `protobuf:"varint,1,opt,name=JobID" json:"JobID,omitempty"`
	WorkID int64 `protobuf:"varint,2,opt,name=WorkID" json:"WorkID,omitempty"`
}

func (m *JobWorkIdent) Reset()                    { *m = JobWorkIdent{} }
func (m *JobWorkIdent) String() string            { return proto.CompactTextString(m) }
func (*JobWorkIdent) ProtoMessage()               {}
func (*JobWorkIdent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JobWorkIdent) GetJobID() int64 {
	if m != nil {
		return m.JobID
	}
	return 0
}

func (m *JobWorkIdent) GetWorkID() int64 {
	if m != nil {
		return m.WorkID
	}
	return 0
}

type ID struct {
	ID int64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type JobWork struct {
	J *Job  `protobuf:"bytes,1,opt,name=j" json:"j,omitempty"`
	W *Work `protobuf:"bytes,2,opt,name=w" json:"w,omitempty"`
}

func (m *JobWork) Reset()                    { *m = JobWork{} }
func (m *JobWork) String() string            { return proto.CompactTextString(m) }
func (*JobWork) ProtoMessage()               {}
func (*JobWork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JobWork) GetJ() *Job {
	if m != nil {
		return m.J
	}
	return nil
}

func (m *JobWork) GetW() *Work {
	if m != nil {
		return m.W
	}
	return nil
}

type Env struct {
	JobId int64  `protobuf:"varint,2,opt,name=JobId" json:"JobId,omitempty"`
	Data  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Env) Reset()                    { *m = Env{} }
func (m *Env) String() string            { return proto.CompactTextString(m) }
func (*Env) ProtoMessage()               {}
func (*Env) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Env) GetJobId() int64 {
	if m != nil {
		return m.JobId
	}
	return 0
}

func (m *Env) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Job)(nil), "databaseDefinition.Job")
	proto.RegisterType((*Work)(nil), "databaseDefinition.Work")
	proto.RegisterType((*ClientInfo)(nil), "databaseDefinition.ClientInfo")
	proto.RegisterType((*JobWorkIdent)(nil), "databaseDefinition.JobWorkIdent")
	proto.RegisterType((*ID)(nil), "databaseDefinition.ID")
	proto.RegisterType((*JobWork)(nil), "databaseDefinition.JobWork")
	proto.RegisterType((*Env)(nil), "databaseDefinition.Env")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataBase service

type DataBaseClient interface {
	GetNextJob(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*JobWork, error)
	// rpc GetCurrentClientID(ClientInfo)	returns(ID);
	GetJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Job, error)
	AddJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*ID, error)
	DeleteJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetAll(ctx context.Context, in *ID, opts ...grpc.CallOption) (DataBase_GetAllClient, error)
	JobDone(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetWorks(ctx context.Context, in *ID, opts ...grpc.CallOption) (DataBase_GetWorksClient, error)
	AddWorks(ctx context.Context, opts ...grpc.CallOption) (DataBase_AddWorksClient, error)
	SaveWork(ctx context.Context, in *Work, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetPart(ctx context.Context, in *JobWorkIdent, opts ...grpc.CallOption) (*Work, error)
}

type dataBaseClient struct {
	cc *grpc.ClientConn
}

func NewDataBaseClient(cc *grpc.ClientConn) DataBaseClient {
	return &dataBaseClient{cc}
}

func (c *dataBaseClient) GetNextJob(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*JobWork, error) {
	out := new(JobWork)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/GetNextJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) GetJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) AddJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/AddJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) DeleteJob(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/DeleteJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) GetAll(ctx context.Context, in *ID, opts ...grpc.CallOption) (DataBase_GetAllClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataBase_serviceDesc.Streams[0], c.cc, "/databaseDefinition.DataBase/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataBaseGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataBase_GetAllClient interface {
	Recv() (*Job, error)
	grpc.ClientStream
}

type dataBaseGetAllClient struct {
	grpc.ClientStream
}

func (x *dataBaseGetAllClient) Recv() (*Job, error) {
	m := new(Job)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataBaseClient) JobDone(ctx context.Context, in *ID, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/JobDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) GetWorks(ctx context.Context, in *ID, opts ...grpc.CallOption) (DataBase_GetWorksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataBase_serviceDesc.Streams[1], c.cc, "/databaseDefinition.DataBase/GetWorks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataBaseGetWorksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataBase_GetWorksClient interface {
	Recv() (*Work, error)
	grpc.ClientStream
}

type dataBaseGetWorksClient struct {
	grpc.ClientStream
}

func (x *dataBaseGetWorksClient) Recv() (*Work, error) {
	m := new(Work)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataBaseClient) AddWorks(ctx context.Context, opts ...grpc.CallOption) (DataBase_AddWorksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DataBase_serviceDesc.Streams[2], c.cc, "/databaseDefinition.DataBase/AddWorks", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataBaseAddWorksClient{stream}
	return x, nil
}

type DataBase_AddWorksClient interface {
	Send(*Work) error
	CloseAndRecv() (*google_protobuf.Empty, error)
	grpc.ClientStream
}

type dataBaseAddWorksClient struct {
	grpc.ClientStream
}

func (x *dataBaseAddWorksClient) Send(m *Work) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataBaseAddWorksClient) CloseAndRecv() (*google_protobuf.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataBaseClient) SaveWork(ctx context.Context, in *Work, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/SaveWork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataBaseClient) GetPart(ctx context.Context, in *JobWorkIdent, opts ...grpc.CallOption) (*Work, error) {
	out := new(Work)
	err := grpc.Invoke(ctx, "/databaseDefinition.DataBase/GetPart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataBase service

type DataBaseServer interface {
	GetNextJob(context.Context, *google_protobuf.Empty) (*JobWork, error)
	// rpc GetCurrentClientID(ClientInfo)	returns(ID);
	GetJob(context.Context, *ID) (*Job, error)
	AddJob(context.Context, *Job) (*ID, error)
	DeleteJob(context.Context, *ID) (*google_protobuf.Empty, error)
	GetAll(*ID, DataBase_GetAllServer) error
	JobDone(context.Context, *ID) (*google_protobuf.Empty, error)
	GetWorks(*ID, DataBase_GetWorksServer) error
	AddWorks(DataBase_AddWorksServer) error
	SaveWork(context.Context, *Work) (*google_protobuf.Empty, error)
	GetPart(context.Context, *JobWorkIdent) (*Work, error)
}

func RegisterDataBaseServer(s *grpc.Server, srv DataBaseServer) {
	s.RegisterService(&_DataBase_serviceDesc, srv)
}

func _DataBase_GetNextJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).GetNextJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/GetNextJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).GetNextJob(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).GetJob(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/AddJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).AddJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).DeleteJob(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataBaseServer).GetAll(m, &dataBaseGetAllServer{stream})
}

type DataBase_GetAllServer interface {
	Send(*Job) error
	grpc.ServerStream
}

type dataBaseGetAllServer struct {
	grpc.ServerStream
}

func (x *dataBaseGetAllServer) Send(m *Job) error {
	return x.ServerStream.SendMsg(m)
}

func _DataBase_JobDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).JobDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/JobDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).JobDone(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_GetWorks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataBaseServer).GetWorks(m, &dataBaseGetWorksServer{stream})
}

type DataBase_GetWorksServer interface {
	Send(*Work) error
	grpc.ServerStream
}

type dataBaseGetWorksServer struct {
	grpc.ServerStream
}

func (x *dataBaseGetWorksServer) Send(m *Work) error {
	return x.ServerStream.SendMsg(m)
}

func _DataBase_AddWorks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataBaseServer).AddWorks(&dataBaseAddWorksServer{stream})
}

type DataBase_AddWorksServer interface {
	SendAndClose(*google_protobuf.Empty) error
	Recv() (*Work, error)
	grpc.ServerStream
}

type dataBaseAddWorksServer struct {
	grpc.ServerStream
}

func (x *dataBaseAddWorksServer) SendAndClose(m *google_protobuf.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataBaseAddWorksServer) Recv() (*Work, error) {
	m := new(Work)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataBase_SaveWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Work)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).SaveWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/SaveWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).SaveWork(ctx, req.(*Work))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataBase_GetPart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobWorkIdent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataBaseServer).GetPart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseDefinition.DataBase/GetPart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataBaseServer).GetPart(ctx, req.(*JobWorkIdent))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataBase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "databaseDefinition.DataBase",
	HandlerType: (*DataBaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextJob",
			Handler:    _DataBase_GetNextJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _DataBase_GetJob_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _DataBase_AddJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _DataBase_DeleteJob_Handler,
		},
		{
			MethodName: "JobDone",
			Handler:    _DataBase_JobDone_Handler,
		},
		{
			MethodName: "SaveWork",
			Handler:    _DataBase_SaveWork_Handler,
		},
		{
			MethodName: "GetPart",
			Handler:    _DataBase_GetPart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _DataBase_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWorks",
			Handler:       _DataBase_GetWorks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddWorks",
			Handler:       _DataBase_AddWorks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "databaseDefinition.proto",
}

func init() { proto.RegisterFile("databaseDefinition.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xdb, 0x4c,
	0x10, 0x96, 0x93, 0x90, 0x8f, 0x49, 0x80, 0x57, 0xfb, 0x22, 0x6a, 0x85, 0x0a, 0x45, 0x96, 0x5a,
	0xe5, 0x14, 0x50, 0x7a, 0x42, 0xa0, 0xaa, 0x21, 0x0e, 0x91, 0x73, 0x00, 0x64, 0x90, 0x5a, 0xf5,
	0xb6, 0xae, 0x37, 0xd4, 0xd4, 0xf6, 0x46, 0xeb, 0x0d, 0x94, 0x1f, 0xdc, 0x3f, 0xd0, 0x7b, 0xa5,
	0x6a, 0xc6, 0x76, 0x3e, 0xda, 0x98, 0x8a, 0xdb, 0xcc, 0x33, 0xf3, 0xcc, 0xee, 0x33, 0x33, 0xbb,
	0x60, 0xfa, 0x5c, 0x73, 0x8f, 0x27, 0xc2, 0x16, 0xd3, 0x20, 0x0e, 0x74, 0x20, 0xe3, 0xde, 0x4c,
	0x49, 0x2d, 0x19, 0xfb, 0x3b, 0xd2, 0x3e, 0xb8, 0x93, 0xf2, 0x2e, 0x14, 0x47, 0x94, 0xe1, 0xcd,
	0xa7, 0x47, 0x22, 0x9a, 0xe9, 0xa7, 0x94, 0x60, 0xfd, 0x30, 0xa0, 0x3c, 0x91, 0x1e, 0x33, 0xa1,
	0x76, 0xf5, 0x18, 0x0b, 0xe5, 0xd8, 0xa6, 0xd1, 0x31, 0xba, 0x65, 0x37, 0x77, 0xd9, 0x0e, 0x94,
	0x1c, 0xdf, 0x2c, 0x11, 0x58, 0x72, 0x7c, 0xd6, 0x86, 0xfa, 0xe5, 0x3c, 0xba, 0xe6, 0x4a, 0x27,
	0x66, 0x99, 0xd0, 0x85, 0xcf, 0x2c, 0x68, 0xe5, 0xb6, 0x2d, 0x63, 0x61, 0x56, 0x28, 0xbe, 0x86,
	0xb1, 0xd7, 0xd0, 0x98, 0x48, 0xef, 0x42, 0x86, 0xbe, 0x50, 0xe6, 0x56, 0xc7, 0xe8, 0x36, 0xdc,
	0x25, 0xc0, 0x18, 0x54, 0x2e, 0x79, 0x24, 0xcc, 0x2a, 0x05, 0xc8, 0x66, 0xff, 0x41, 0x79, 0x14,
	0x3f, 0x98, 0x35, 0x82, 0xd0, 0xc4, 0x1a, 0xae, 0xd0, 0x73, 0x15, 0x23, 0x5e, 0xef, 0x18, 0xdd,
	0xba, 0xbb, 0x04, 0xb0, 0x06, 0x9d, 0xde, 0xa0, 0x00, 0xd9, 0xd6, 0xcf, 0x32, 0x54, 0x3e, 0x4a,
	0xf5, 0x8d, 0xed, 0x43, 0x15, 0xef, 0xb2, 0xd0, 0x99, 0x79, 0x28, 0x0b, 0xad, 0xab, 0xa9, 0x63,
	0x67, 0x62, 0x17, 0x3e, 0xca, 0xb2, 0x83, 0x64, 0xc6, 0xf5, 0x97, 0xaf, 0xb7, 0x41, 0x24, 0x32,
	0xd9, 0x6b, 0x18, 0x3b, 0x04, 0xb8, 0x08, 0xe2, 0x20, 0x49, 0x33, 0x52, 0xe1, 0x2b, 0x08, 0x3b,
	0x86, 0xff, 0x6f, 0xa5, 0xe6, 0x21, 0x3a, 0x39, 0x51, 0xf8, 0xd4, 0x80, 0xb2, 0xbb, 0x29, 0xc4,
	0x3e, 0x40, 0x73, 0x28, 0xa3, 0x59, 0x28, 0xb4, 0xf0, 0xcf, 0x9f, 0xa8, 0x23, 0xcd, 0xfe, 0x61,
	0x6f, 0xc3, 0xec, 0x87, 0x61, 0x20, 0x62, 0xed, 0xc4, 0x53, 0xe9, 0xae, 0x52, 0x98, 0x0d, 0xdb,
	0xc3, 0xb9, 0x52, 0x22, 0xd6, 0x69, 0x06, 0xb5, 0xf0, 0xdf, 0x35, 0xd6, 0x49, 0x8b, 0x76, 0xd6,
	0x97, 0xed, 0x44, 0xb5, 0x2b, 0x22, 0xd2, 0x46, 0xaf, 0x20, 0x38, 0xa0, 0x0b, 0x1e, 0x84, 0x43,
	0x39, 0x8f, 0xb5, 0xd9, 0x24, 0x8d, 0x4b, 0x80, 0xed, 0xc1, 0xd6, 0x48, 0x29, 0xa9, 0xcc, 0x16,
	0x8d, 0x34, 0x75, 0x70, 0x32, 0x37, 0x9a, 0xeb, 0x79, 0x62, 0x6e, 0x13, 0x9c, 0x79, 0xb8, 0x9a,
	0x43, 0x19, 0x45, 0x3c, 0xf6, 0xcd, 0x1d, 0x0a, 0xe4, 0x2e, 0xde, 0xe2, 0x9a, 0x2b, 0x1e, 0x09,
	0x2d, 0x54, 0x62, 0xee, 0x76, 0xca, 0xdd, 0x86, 0xbb, 0x82, 0x58, 0x9f, 0x01, 0x96, 0xb2, 0x58,
	0x17, 0x76, 0xaf, 0x66, 0x42, 0x71, 0x1d, 0xc4, 0x77, 0x37, 0x4f, 0x89, 0x16, 0x11, 0xad, 0x40,
	0xc3, 0xfd, 0x13, 0xc6, 0x79, 0x63, 0x1b, 0xe7, 0x5a, 0x28, 0x5a, 0xc6, 0x12, 0xa5, 0xad, 0x61,
	0xd6, 0x19, 0xb4, 0x26, 0xd2, 0xc3, 0x95, 0x72, 0x7c, 0x91, 0x6a, 0x9a, 0x48, 0x6f, 0xb1, 0x56,
	0xa9, 0x83, 0x9a, 0x28, 0x25, 0xdf, 0xa9, 0xcc, 0xb3, 0xf6, 0xa0, 0x94, 0x3d, 0xad, 0x9c, 0x50,
	0x72, 0x6c, 0xeb, 0x13, 0xd4, 0xb2, 0x9a, 0xec, 0x0d, 0x18, 0xf7, 0x14, 0x69, 0xf6, 0x5f, 0x6d,
	0x1a, 0xd7, 0x44, 0x7a, 0xae, 0x71, 0xcf, 0xde, 0x82, 0xf1, 0x48, 0xa5, 0x9b, 0x7d, 0x73, 0x53,
	0x1a, 0xd6, 0x72, 0x8d, 0x47, 0xeb, 0x88, 0x9e, 0x50, 0x7e, 0xc9, 0xfc, 0x39, 0xa7, 0x0e, 0x0e,
	0x18, 0xa9, 0x74, 0x5c, 0xcb, 0x25, 0xbb, 0xff, 0xab, 0x02, 0x75, 0x9b, 0x6b, 0x7e, 0xce, 0x13,
	0xc1, 0x06, 0x00, 0x63, 0xa1, 0x2f, 0xc5, 0x77, 0x8d, 0x5f, 0xc5, 0x7e, 0x2f, 0xfd, 0x50, 0x7a,
	0xf9, 0x87, 0xd2, 0x1b, 0xe1, 0x87, 0xd2, 0x3e, 0x28, 0xb8, 0x27, 0xe9, 0x39, 0x81, 0xea, 0x58,
	0x64, 0xf4, 0x0d, 0x69, 0x8e, 0xdd, 0x2e, 0x92, 0x89, 0xd4, 0x81, 0xef, 0xa3, 0x55, 0x94, 0xd2,
	0x2e, 0xa8, 0xc9, 0x4e, 0xa1, 0x61, 0x0b, 0x7c, 0x0d, 0xcf, 0x1d, 0x5c, 0xa0, 0x87, 0x9d, 0xd2,
	0x95, 0x07, 0x61, 0xf8, 0xe2, 0x2b, 0x1f, 0x1b, 0xec, 0x84, 0x46, 0x49, 0x6f, 0xe5, 0xa5, 0xe7,
	0xbe, 0x87, 0xfa, 0x58, 0x68, 0xec, 0x5a, 0x52, 0xc8, 0x2d, 0x1c, 0xf6, 0xb1, 0x81, 0xfc, 0x81,
	0xef, 0xa7, 0xfc, 0xc2, 0xbc, 0xa2, 0xd3, 0xbb, 0x06, 0x3b, 0x83, 0xfa, 0x0d, 0x7f, 0x10, 0x34,
	0xb6, 0x17, 0xf3, 0xd9, 0x08, 0x6a, 0x63, 0xa1, 0xf1, 0xeb, 0x64, 0x9d, 0x67, 0x16, 0x82, 0x1e,
	0x4d, 0xb1, 0x0c, 0xaf, 0x4a, 0x65, 0xdf, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xea, 0xda, 0x48,
	0x03, 0xeb, 0x06, 0x00, 0x00,
}
